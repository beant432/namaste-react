npm is not stand for node package modular but it means everything else. It is used to manges packages.
All packages come from npm . it is package manager, also known as dependencies. 

package json- configuration file for npm, Json file

Add bundler- bundle all coode so shift to production 
A bundler is a tool that takes all your JavaScript code, along with any other assets like CSS or images, and combines them into a single file (or a few files) that can be served to the browser
webpack bundler
parcel
vite

create-react-app uses webpack bundler and babel behind the scene.
two types of packages or dependencies
one is dev dependcy- required in development phase
general - use in production as well 
npm install -D parcel- we are installing parcel from npm

caret ^ - upggrade minor and patch e.g 2.3.8 to 2.x.x
tild ~ tild only upgrade patch version 2.3.8(major.minor.patch) to 2.3.x
patch-
A “repair job” for a piece of programming; also known as a “fix”. A patch is the immediate solution to an identified problem that is provided to users;

diff bw package.json - track of which version installed approx version usingg ^ and ~
package.lock.json - keep a track or record of exact version 
node moducles- actual data of depencies- database where all data exist

transitive dependcy- e.g if parcel, it has multiple ddepencies

parcel create va servrer to us e.g localhost npx parcel index.html. build development

npx- executing package

ways to get react into project - using npm or cdn(cdn not preffered way)

type module= not normal JS understand import export

automatic reload browser whenever changes

#parcel benefits-  dev build, local server, HMR- hot module replacement(refresh browserr), file watching alogrithim- built in c++,
   faster build because of caching,
image optimization
minification of files
bundling for production
compress your files
code splitting
consitent hashing
differential bundling- support old nd multiple browsers
dignostaic
error handling
https
tree shaking algo- remove unused code -
different dev and prood build (npx parcel build index.html)

browserlist- used for making prject compatible with older versionds
,
  "browserslist" : [
    "last 2 versions",
    "last 2 Chrome version"
  ]

  npm start or npm run start

  it is not a part of react - JSX- javascript syntax- that make life easier of developers instead of creating react elements
  we can write react without JSX
  JSx different than html. ITs html-like syntax
  JSx is not js code

  react.createElement('h1', {'id':'hj'}, 'this is chidren);

  browsers or js engine doesn't understand JSX
   only understand es6 ecmascript(pure javascript)
   bcz of parcel - broswers returning jsx- JSX code transpiled before goes to js engine
  parcel installed babel - babel is JS compiler, that convert jsx to react.create element code so normal browser can understand
jsx-react.createElement- js object-html

jsx= camelcase

everything is component in react

2 types- class based - old way of writing code - uses JS classes
and functional based - new way of writing code - uses JS functions

react functional component- just normal JS function which returns some jsx
component composition - when we call any functioncal component in othher functional coomponent. e.g we call <Title /> in <heading />

in jsx- write {}- where we can write any js code

cross site scripting- attacker can send some data through apis and acess data 
Cross-site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. 
jsx take care of this - it sanitizes the data

we can read code using jsx
we can use css in react  

// const Parent = React.createElement('div', { id: 'parent' }, [
//     React.createElement('div', { id: 'child' }, [
//         React.createElement('h1', { id: 'h1' }, 'I am h1 tag'),
//         React.createElement('h2', { id: 'h2' }, 'I am h2 tag')
//     ]),
//     React.createElement('div', { id: 'child2' }, [
//         React.createElement('h1', { id: 'h1' }, 'I am hs1 tag'),
//         React.createElement('h2', { id: 'h2' }, 'I am h2 tag')
//     ])
// ]);
// this is when JSX comes

const heading = React.createElement(
    'h1',
    { id: 'heading' },
    'Hello world from react'
); //return object. react element using core react

const jsxheading = <h1>heading from jsx</h1>; // also return object nor,ally its react element

const Title = () => <h1>Title</h1>


// React functional component // that return some jsx or react element
const HeadingComponent = () => {
    return (
        <>
            <Title />
            {Title()}
            <h1>Heading component</h1>
        </>
    );
    
}
// const root = ReactDOM.createRoot(document.getElementById('root'));
// // root.render(heading); //render convert object to html
// root.render(<HeadingComponent />) // render like this 



props are properties - we can pass data from one component to another

config driven UI-  controlling UI configs by backend // ui is driven by config

Config-driven UI is a technique that allows you to create user interfaces based on a configuration file, such as JSON, or a TypeScript file that defines the layout and content of the UI components. This can be useful for creating dynamic and customizable UIs without hard coding them
Configuration-driven UI, also known as config-driven UI or configuration-based UI - When you build real a world application so you want should your website work in many country or many place we control our fontend it is known as using Config-Driven UI . API or Backend Driven which is data Comming from API.

array join- const elements = ['Fire', 'Air', 'Water'];

console.log(elements.join());
// Expected output: "Fire,Air,Water"

console.log(elements.join(''));
// Expected output: "FireAirWater"

console.log(elements.join('-'));
// Expected output: "Fire-Air-Water"

// optional chaining ?. The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined

keys - without keys if we add any item then it cleans container and re-render
to identify uniquely a key is the only thing React uses to identify DOM elements.
some people use as index as key- that is incorrect way

react uses- large application less code

never use hardcoded data in components

2 types oof export and imports
named and default expoort- by default file can export only one thing - no need to use {} export default component
named is used when mu;tiple things need to be exported - used {} while importing- export const component;

But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like

react is fast and efficient in dom manuplation

react hooks- normal js function that has some logic written by react
useState- super powerful state variable- to manabge state
const[data, setData]=useState("")
data- state variable
setData-function - use to uodate data
"" default value
react keep track track of these elements

when state variable updates, react will re-render the component
keeps UI sync with data

react is only good at dom manuplication= 


react use reconsiliation alogrithim (known as React fiber in react 16)- to update dom
virtual dom - it is object representation of actual DOM. it is kind of normal javascript object
virtual dom {{}}
actual dom <div><div></div></div>

diff algo- find out the difference bw current and earlier (old and new) virtual dom
reconciliation
The algorithm React uses to diff one tree with another to determine which parts need to be changed.
update
A change in the data used to render a React app. Usually the result of `setState`. Eventually results in a re-render.

Mono lith Arcitecture - huge big project with small api, UI(JS pages), authentication, database, notification
micro services - different services for different apis, e.g service for backend, service for UI, service for ddata- then combine together - forms big app known as
seperation of concerns, and single responsibilty principle

ep 6
useEffect- take 2 arguments useEffect(()={}, []);- it called after as soon as component rendered
()=>{} call back function
[]- dependcy array

fetch return a promise we can use async await orr then catch

learn cors- 
shimmer ui- fake content till data. is loaded

whenever state variable updates react tragiiers a reconciliation process(re-renders the component)
re-renders the component means UI is updated- find difference bw new virtual and older virtual dom
e.g onchange only updates input field whole body component being re-rendered

.includes check if input has some data
before find toLowercase is used


Episode 7- best practices
useEffect hook- use 2 arguments, 1 is call back function . 2 is dependcy array - 
called after rendering page
2 one is not mandatory

if no dependcy array- useEffect is called on every component render 
if empty [] dependencies array - called only on initial render just once
if something in array= called whenever dependcy change or updated

useState- never call useState outside component- used  for creating local state variables
called on top, never create inside if else, for loop, nested functions

Routing= use react router dom
ruting config in app.js createBrowserRouter, RouterProvider ,Outlet from 'react-router-dom'

createBrowserRouter is list of path createBrowserRouter([{path:'/', element:<AppLayout />}, ])

rafce
react-router dom gives us some hook useRouteError for errors const err=useRouteError();

children route- outlet

never use<a> tag</a> in react for routing- bcz whole page get refreshed
we camn navigate without reloadimg whole page- we will use link that is coming from react router dom
we use to ="" in link instead of href whole page won;t get refreshed or reload
that why its know as SPA= single page application- not reloading, just refreshing componentr
one page=component change in spa

two types opf routing in web app
client side routing- all code loaded once,- doesn't make any network call to fetch page
server side routing- whole page get refreshed

how to different routing for different restayrants=

useParams from 'react-routerdom'

///ep 8
class based components-which has render method that returns jsx code
react.component is a class present in react

how we can pass props= we will create contrustoor to receive props, always have too use super(proops)
The super keyword is used to call the constructor of its parent class to access the parent's properties and methods. 
this.proops.name

how we create state in class - update ui 
loading or mounting or calling or invoking

loading class component=creating a new instance- this constuctor is called
in constructor we can create props and state this.state={
  count:0,count2
}
in state object we can create multiple varibles

how to update state variables - we can't update state variable directly in code e.g count=count+1
it gives a function this.setState({count:this.state.count+1})

what are react componets lifecycle methods- 
how mounted word is used- how component is loaded
loading componemt to web page- mounting- 
first constructor called then render

componentDidMount(){} - called after constructore, render- component is alrray mounted on web page
used to make api calls

2 instances of same class if same component is called twice- then componedidmount called after consttucror amd render

https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/ 

react has 2 pahses - render and commit phhase
render- constructor amd render() called
react updates dom
commit - componentdidmount called

dom updated in single batch

how we can make api calls in class component - we can make componedidmount as async functioon
mounting- constructor amd render() - updates dom - component did mount
updating- render()- updates dom- component did mount
unmounting- when it will removing from ui- when we go to new page

componentdidupdate- if state changes the it will called
component will unmount- calls when leaving page


wwe can return function from useeffect for unmounting


ep 9-
custom hook- make code more modular
single respoonsiblity principle-each component has single responsibilty
modulartity- split code into smalle chuncks code

hook- just utility function- helper function

//chunking or code splitting dynamic bundling, lazy loading(on demand loading)-dynamic impoort-  divide code into chunks-break down app code into smaller

lazy(()=>{import('path')}) and wrap content in suspensse
suspense takes fallback

tailwind css-

ep-11
higher order components- function that takes a component and enhances and return a component

react have 2c layers - UI and data layer (consists of state, props)to manage data - 
comtrolled and uncontrolled component - //controlled component bcz parent ResturantMenu is controlling /don't have its own state


lifting the state up-giving access to parent- when parent controll children

react devtools-

can we modify state varible of parent via child= not directly possible, 
prop drilling- in react data flow in one direction top to bottom parent to children - propblem of passing props - react gives us context- it solves problemm of props drilling
we can use context in anywhere - context is like global thing- when we want data at multiple places

react gives helper function createContext-
we can use hook (useContext) too get context

when data flow from - parent=>chil=child=child
if we want pass data from children to parents- 

how we can access hook in class component <UserContext.consumer>{data=()=>{}}
to update context=context provider

we can use mutile nested context

// ep 12
how to manage data using redux